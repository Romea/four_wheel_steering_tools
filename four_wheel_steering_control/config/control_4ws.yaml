vehicle_joint_publisher:
  type: "joint_state_controller/JointStateController"
  publish_rate: 50

vehicle_controller:
  type: "four_wheel_steering_controller/FourWheelSteeringController"
  front_wheel: ['front_left_wheel', 'front_right_wheel']
  rear_wheel: ['rear_left_wheel', 'rear_right_wheel']
  front_steering: ['front_left_steering_joint', 'front_right_steering_joint']
  rear_steering: ['rear_left_steering_joint', 'rear_right_steering_joint']
  publish_rate: 50
  pose_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  twist_covariance_diagonal: [0.001, 0.001, 0.001, 0.001, 0.001, 0.03]
  cmd_vel_timeout: 0.25

  # Base frame_id
  base_frame_id: base_footprint

  # Odometry fused with IMU is published by robot_localization, so
  # no need to publish a TF based on encoders alone.
  enable_odom_tf: true

  enable_twist_cmd: false

  # Velocity and acceleration limits
  # Whenever a min_* is unspecified, default to -max_*
  linear:
    x:
      has_velocity_limits    : true
      max_velocity           : 3.0   # m/s
      has_acceleration_limits: true
      max_acceleration       : 3.0   # m/s^2
  angular:
    z:
      has_velocity_limits    : true
      max_velocity           : 1.0   # rad/s
      has_acceleration_limits: true
      max_acceleration       : 2.0   # rad/s^2

# Work around to use pid controller on Gazebo 7
# https://github.com/ros-simulation/gazebo_ros_pkgs/issues/479
/gazebo_ros_control:
  pid_gains:
    front_left_steering_joint: {p: 1000.0, i: 0.01, d: 10.0}
    front_right_steering_joint: {p: 1000.0, i: 0.01, d: 10.0}
    rear_left_steering_joint: {p: 1000.0, i: 0.01, d: 10.0}
    rear_right_steering_joint: {p: 1000.0, i: 0.01, d: 10.0}
